/** An enumeration of recognized user roles. */
export enum UserRole {
  /** A regular user. Will cover the vast majority of users. */
  User = 'User',

  /** Admin users who can manage the application and user accounts. */
  Admin = 'Admin',
}

/** An interface representing a User. */
export interface User {
  /** Unique ID that identifies the user in the system. This will never change. */
  readonly id: string;

  /** A username to identify the user. This must be unique but can be changed. */
  readonly username: string;

  /** Date and time of the last time the user logged in. */
  readonly lastLogin?: Date;

  /** Date and time of account creation. */
  readonly memberSince: Date;

  /** User's email address. */
  readonly email?: string;

  /** Boolean indicating whether the user's email address has been verified with a confirmation email. */
  readonly emailVerified: boolean;

  /** Boolean indicating whether the user has a password set on their account. */
  readonly hasPassword: boolean;

  /** Boolean indicating whether the user's account has been suspended. */
  readonly isLockedOut: boolean;

  /** The role the user is currently assigned to. */
  readonly role: UserRole;

  /**
   * Attempts to change an account's username.
   * @param newUsername The new username to assign to the account.
   * @returns Returns a Promise to indicate success or failure when the operation completes.
   * @throws {ConflictError} Thrown if the requested username is already taken by another user.
   * @throws {ValidationError} Thrown if the new username is invalid.
   */
  changeUsername(newUsername: string): Promise<void>;

  /**
   * Attempts to change the email address on a user's account.
   * NOTE: This will reset `emailVerified` to false if the previous address had already been verified.
   * @param newEmail The new email address to assign to the user's account.
   * @returns Returns a Promise to indicate success or failure when the operation completes.
   * @throws {ConflictError} Thrown if the email address is already taken on another user account.
   * @throws {ValidationError} Thrown if the email address is invalid.
   */
  changeEmail(newEmail: string): Promise<void>;

  /**
   * Gets a unique token that can be sent to the user's email address. The token can later be used to verify
   * the user's email address by calling {@link verifyEmail}.
   * @returns Returns a Promise to return the token once it has been created.
   */
  getEmailVerificationToken(): Promise<string>;

  /**
   * Attempts to verify a user's email address. (Set the {@link emailVerified} property to true.)
   * @param verificationToken The verification token generated by calling {@link getEmailVerificationToken}.
   * @returns Returns a Promise to return a boolean indicating whether the verification succeeded. (`true` if the
   * verification token was a match; otherwise, `false` if the token was incorrect or expired.)
   */
  verifyEmail(verificationToken: string): Promise<boolean>;

  /**
   * Locks (suspends) a user's account. The user will no longer be able to log into the system and any active
   * login sessions for the user will be terminated.
   * @returns Returns a Promise to indicate when the operation has completed.
   */
  lockAccount(): Promise<void>;

  /**
   * Unlocks a previously-locked user account. The user's permission to log into the system will be re-instated.
   * @returns Returns a Promise to indicate when the operation has completed.
   */
  unlockAccount(): Promise<void>;

  /**
   * Attempts to change the password on a user account. This will not work if the user does not yet have
   * a password set on their account. To apply a password on an account that does not yet have one, one of
   * {@link resetPassword} or {@link forceResetPassword} should be used.
   * @param oldPassword The old (current) password on the account.
   * @param newPassword The new password to apply to the account.
   * @returns Returns a Promise to return a boolean indicating whether the operation succeeded.
   * The value will be `true` if the password was successfully changed, or `false` if the `oldPassword` did
   * not match or the account did not yet have a password set.
   * @throws {ValidationError} Thrown if the new password does not meet strength requirements.
   */
  changePassword(oldPassword: string, newPassword: string): Promise<boolean>;

  /**
   * Gets a distinct token for requesting a password reset. This token can be emailed to a user so that they
   * can reset a forgotten password.
   * @returns Returns a Promise to return the token once it's created.
   */
  getPasswordResetToken(): Promise<string>;

  /**
   * Allows a user to reset the password on account where the password has been lost or forgotten.
   * @param token The token generated by calling {@link getPasswordResetToken}.
   * @param newPassword The new password to apply to the account.
   * @returns Returns a Promise to return a boolean value indicating whether the operation was successfully.
   * The value will be `true` if the password was successfully changes, or `false` if the token was incorrect or expired.
   * @throws {ValidationError} Thrown if the new password does not meet strength requirements.
   */
  resetPassword(token: string, newPassword: string): Promise<boolean>;

  /**
   * Forcefully, changes the password on a user account. This function should only be executed by
   * system admins.
   * @param newPassword The new password to apply to the account.
   * @returns Returns a Promise to indicate when the operation has completed.
   * @throws {ValidationError} Thrown if the new password does not meet strength requirements.
   */
  forceResetPassword(newPassword: string): Promise<void>;

  /**
   * Changes the role assigned to the user's account. Only admins should be able to call this!
   * @param newRole The new role to assign to the user account.
   * @returns Returns a Promise to indicate when the operation has completed.
   */
  changeRole(newRole: UserRole): Promise<void>;

  /**
   * Exports the user entity data as a simple JSON representation.
   * @returns Returns an object representing the properties of this user entity.
   */
  toJSON(): Record<string, unknown>;
}
